"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioButton = exports.defaultProps = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var style_helpers_1 = require("../../util/style-helpers");
var cx = style_helpers_1.lucidClassNames.bind('&-RadioButton');
var bool = prop_types_1.default.bool, func = prop_types_1.default.func, object = prop_types_1.default.object, string = prop_types_1.default.string;
/** TODO: Remove nonPassThroughs when the component is converted to a functional component */
var nonPassThroughs = [
    'callbackId',
    'children',
    'className',
    'isDisabled',
    'isSelected',
    'name',
    'onSelect',
    'style',
];
exports.defaultProps = {
    isDisabled: false,
    isSelected: false,
    onSelect: lodash_1.default.noop,
};
var RadioButton = function (props) {
    var className = props.className, isDisabled = props.isDisabled, isSelected = props.isSelected, onSelect = props.onSelect, style = props.style, passThroughs = __rest(props, ["className", "isDisabled", "isSelected", "onSelect", "style"]);
    var nativeElement = react_1.default.createRef();
    function handleClicked(event) {
        if (!isDisabled && !isSelected) {
            onSelect(true, { event: event, props: props });
            if (nativeElement.current) {
                nativeElement.current.focus();
            }
        }
    }
    function handleSpanClick(e) {
        e.preventDefault();
    }
    return (react_1.default.createElement("span", { className: cx('&', {
            '&-is-disabled': isDisabled,
            '&-is-selected': isSelected,
        }, className), onClick: function (e) { return handleClicked(e); }, style: style },
        react_1.default.createElement("input", __assign({ onChange: lodash_1.default.noop }, lodash_1.default.omit(passThroughs, nonPassThroughs), { checked: isSelected, className: cx('&-native'), disabled: isDisabled, ref: nativeElement, type: 'radio' })),
        react_1.default.createElement("span", { onClick: handleSpanClick, className: cx('&-visualization-glow') }),
        react_1.default.createElement("span", { onClick: handleSpanClick, className: cx('&-visualization-container') }),
        react_1.default.createElement("span", { onClick: handleSpanClick, className: cx('&-visualization-dot') })));
};
exports.RadioButton = RadioButton;
exports.RadioButton.defaultProps = exports.defaultProps;
exports.RadioButton.displayName = 'RadioButton';
exports.RadioButton.peek = {
    description: "`RadioButton` is a round two-state toggle used to create `RadioButtonLabeled`. It uses a hidden native checkbox control under the hood but leverages other `HTML` elements to visualize its state.",
    notes: {
        overview: "RadioButton is a round two-state toggle. Use `RadioButtonLabeled` or `RadioGroup` in your applications.",
        intendedUse: "Used to create `RadioButtonLabeled` and `RadioGroup`.",
        technicalRecommendations: "\n\t\t\t- Use the Selected state when a filter or setting will be applied.\n\t\t\t- Use the Unselected state when a filter or setting will not be applied.\n\t\t\t- Any props that are not explicitly defined in `propTypes` are passed to the native radio button control.\n\t\t",
    },
    categories: ['controls', 'toggles'],
};
exports.RadioButton.propTypes = {
    /**
        Appended to the component-specific class names set on the root element.
    */
    className: string,
    /**
        Indicates whether the component should appear and act disabled by having
        a "greyed out" palette and ignoring user interactions.
    */
    isDisabled: bool,
    /**
        Indicates that the component is in the "selected" state when true and in
        the "unselected" state when false.
    */
    isSelected: bool,
    /**
    Optional name for the input element.
    */
    name: string,
    /**
        Called when the user clicks on the component or when they press the space
        key while the component is in focus, and only called when the component
        is in the unselected state.  Signature: \`(true, { event, props }) => {}\`
    */
    onSelect: func,
    /**
        Passed through to the root element.
    */
    style: object,
};
exports.default = exports.RadioButton;
//# sourceMappingURL=RadioButton.js.map