"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBar = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var style_helpers_1 = require("../../util/style-helpers");
var component_types_1 = require("../../util/component-types");
var cx = style_helpers_1.lucidClassNames.bind('&-ProgressBar');
var number = prop_types_1.default.number, string = prop_types_1.default.string, oneOf = prop_types_1.default.oneOf, node = prop_types_1.default.node;
var Title = function (_props) { return null; };
Title.displayName = 'ProgressBar.Title';
Title.propName = 'Title';
Title.peek = {
    description: "Content displayed at the top of the `ProgressBar`.",
};
var defaultProps = {
    kind: 'default',
    percentComplete: 0,
};
var ProgressBar = function (props) {
    var _a;
    var kind = props.kind, percentComplete = props.percentComplete, className = props.className, passThroughs = __rest(props, ["kind", "percentComplete", "className"]);
    var titleChildProp = lodash_1.default.get((0, component_types_1.getFirst)(props, exports.ProgressBar.Title), 'props', {});
    return (react_1.default.createElement("div", __assign({}, passThroughs, { className: cx('&', className, {
            '&-default': kind === 'default',
            '&-success': kind === 'success',
            '&-danger': kind === 'danger',
            '&-info': kind === 'info',
            '&-warning': kind === 'warning',
        }) }),
        react_1.default.createElement("title", __assign({}, titleChildProp, { className: cx('&-title') })),
        react_1.default.createElement("div", { className: cx('&-bar-container') },
            react_1.default.createElement("div", { className: cx("&-bar", "&-bar-".concat(kind), (_a = {},
                    _a["&-bar-".concat(kind, "-is-pulsed")] = percentComplete < 100,
                    _a)) }),
            react_1.default.createElement("div", { className: cx("&-bar-overlay"), style: { width: "".concat(100 - percentComplete, "%") } }))));
};
exports.ProgressBar = ProgressBar;
exports.ProgressBar.defaultProps = defaultProps;
exports.ProgressBar.Title = Title;
exports.ProgressBar.displayName = 'ProgressBar';
exports.ProgressBar.peek = {
    description: "A `ProgressBar` is used to indicate progress in a procedure consisting of numerous discrete steps or continuous operation.",
    categories: ['communication'],
};
exports.ProgressBar.propTypes = {
    /**
        Appended to the component-specific class names set on the root element.
    */
    className: string,
    /**
        Applies a color style for the kind of ProgressBar.
    */
    kind: oneOf(['default', 'success', 'danger', 'info', 'warning']),
    /**
        Percentage ProgressBar is complete.
    */
    percentComplete: number,
    children: node,
    /*
     *Child Element* - Title contents. Only one \`Title\` is used.
     */
    Title: node,
};
exports.default = exports.ProgressBar;
//# sourceMappingURL=ProgressBar.js.map