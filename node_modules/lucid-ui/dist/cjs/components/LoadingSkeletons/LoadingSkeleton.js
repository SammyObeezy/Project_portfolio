"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingSkeleton = void 0;
var react_1 = __importDefault(require("react"));
var react_placeholder_1 = __importDefault(require("react-placeholder"));
var lodash_1 = __importDefault(require("lodash"));
var style_helpers_1 = require("../../util/style-helpers");
var LoadingIndicator_1 = __importDefault(require("../LoadingIndicator/LoadingIndicator"));
var Panel_1 = __importDefault(require("../Panel/Panel"));
var animationStyle = style_helpers_1.lucidClassNames.bind('&-LoadingSkeleton-animatedSkeleton');
var LoadingSkeleton = function (props) {
    var _a = __assign({}, props), Skeleton = _a.Skeleton, isLoading = _a.isLoading, children = _a.children, className = _a.className, header = _a.header, style = _a.style, _b = _a.width, width = _b === void 0 ? undefined : _b, _c = _a.height, height = _c === void 0 ? undefined : _c, _d = _a.isPanel, isPanel = _d === void 0 ? false : _d, _e = _a.hasOverlay, hasOverlay = _e === void 0 ? false : _e, _f = _a.overlayKind, overlayKind = _f === void 0 ? 'light' : _f, _g = _a.numRows, numRows = _g === void 0 ? 1 : _g, _h = _a.numColumns, numColumns = _h === void 0 ? 1 : _h, _j = _a.marginTop, marginTop = _j === void 0 ? 2 : _j, _k = _a.marginBottom, marginBottom = _k === void 0 ? 2 : _k, _l = _a.marginRight, marginRight = _l === void 0 ? 2 : _l, _m = _a.marginLeft, marginLeft = _m === void 0 ? 2 : _m;
    if (!isLoading) {
        return (react_1.default.createElement("div", { className: className, "data-test-id": 'loadingSkeleton-Children' }, children));
    }
    if (!Skeleton) {
        return (react_1.default.createElement(LoadingIndicator_1.default, { "data-test-id": 'loadingSkeleton-LoadingIndicator', isLoading: true, isVisible: true, hasOverlay: hasOverlay, overlayKind: overlayKind }));
    }
    var skeletonProps = __assign(__assign({}, style), { width: width, height: height, display: 'flex' });
    var skeletonPlaceholder = (react_1.default.createElement(Skeleton, __assign({ "data-test-id": 'loadingSkeleton_Skeleton' }, skeletonProps)));
    var matrix = lodash_1.default.times(numColumns, function (column) { return (react_1.default.createElement("div", { key: "column".concat(column), style: {
            display: 'inline-block',
            marginRight: marginRight,
            marginLeft: marginLeft,
        }, "data-test-id": 'loadingSkeleton-SkeletonColumn' },
        react_1.default.createElement("div", { style: {
                display: 'inline-block',
            } }, lodash_1.default.times(numRows, function (row) { return (react_1.default.createElement("div", { className: animationStyle('&', className), "data-test-id": 'loadingSkeleton-ReactPlaceholder', key: "row".concat(row), style: {
                marginTop: marginTop,
                marginBottom: marginBottom,
            } },
            react_1.default.createElement("div", null,
                header ? (react_1.default.createElement("div", { "data-test-id": 'loadingSkeleton-SkeletonHeader', style: {
                        marginBottom: 2,
                    } }, header)) : null,
                react_1.default.createElement(react_placeholder_1.default, { showLoadingAnimation: true, ready: !isLoading, customPlaceholder: skeletonPlaceholder })))); })))); });
    var skeletonMatrix = react_1.default.createElement("div", null, matrix);
    return isPanel ? (react_1.default.createElement(Panel_1.default, { "data-test-id": 'loadingSkeleton-Panel' }, skeletonMatrix)) : (skeletonMatrix);
};
exports.LoadingSkeleton = LoadingSkeleton;
exports.default = exports.LoadingSkeleton;
//# sourceMappingURL=LoadingSkeleton.js.map