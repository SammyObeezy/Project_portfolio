"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.States = exports.LabelAsProp = exports.InteractiveWithChangingLabels = exports.Interactive = exports.Basic = void 0;
var react_1 = __importStar(require("react"));
var SwitchLabeled_1 = __importDefault(require("./SwitchLabeled"));
exports.default = {
    title: 'Controls/SwitchLabeled',
    component: SwitchLabeled_1.default,
    subcomponents: { 'SwitchLabeled.Label': SwitchLabeled_1.default.Label },
    parameters: {
        docs: {
            description: {
                component: SwitchLabeled_1.default.peek.description,
            },
        },
    },
    args: SwitchLabeled_1.default.defaultProps,
};
var Basic = function (args) {
    var _a = (0, react_1.useState)(false), isSelected = _a[0], setIsSelected = _a[1];
    var handleSelected = function () {
        setIsSelected(!isSelected);
    };
    return (react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { Label: 'Default', onSelect: handleSelected, isSelected: isSelected })));
};
exports.Basic = Basic;
/* Interactive */
var Interactive = function (args) {
    var style = {
        marginBottom: '3px',
    };
    var _a = (0, react_1.useState)({
        airplaneMode: false,
        bluetooth: false,
        cellularData: false,
    }), state = _a[0], setState = _a[1];
    var handleSelectedAirplaneMode = function (isSelected) {
        setState(__assign(__assign({}, state), { airplaneMode: isSelected }));
    };
    var handleSelectedBluetooth = function (isSelected) {
        setState(__assign(__assign({}, state), { bluetooth: isSelected }));
    };
    var handleSelectedCellularData = function (isSelected) {
        setState(__assign(__assign({}, state), { cellularData: isSelected }));
    };
    return (react_1.default.createElement("section", null,
        react_1.default.createElement("p", null,
            react_1.default.createElement("em", null,
                "(Use the styles on the parent container of ",
                react_1.default.createElement("code", null, "SwitchLabeled"),
                ' ',
                "components to ensure only the switches and their labels are clickable)")),
        react_1.default.createElement("span", { style: {
                display: 'inline-flex',
                flexDirection: 'column',
                alignItems: 'flex-start',
            } },
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.airplaneMode === true, onSelect: handleSelectedAirplaneMode, style: style }),
                react_1.default.createElement(SwitchLabeled_1.default.Label, null, "Airplane Mode")),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.bluetooth === true, onSelect: handleSelectedBluetooth, style: style }),
                react_1.default.createElement(SwitchLabeled_1.default.Label, null, "Bluetooth")),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.cellularData === true, onSelect: handleSelectedCellularData, style: style }),
                react_1.default.createElement(SwitchLabeled_1.default.Label, null, "Cellular Data")))));
};
exports.Interactive = Interactive;
/* Interactive With Changing Labels */
var InteractiveWithChangingLabels = function (args) {
    var style = {
        marginBottom: '3px',
    };
    var _a = (0, react_1.useState)({
        airplaneMode: false,
        bluetooth: false,
        cellularData: false,
        spam: false,
    }), state = _a[0], setState = _a[1];
    var handleSelectedAirplaneMode = function (isSelected) {
        setState(__assign(__assign({}, state), { airplaneMode: isSelected }));
    };
    var handleSelectedBluetooth = function (isSelected) {
        setState(__assign(__assign({}, state), { bluetooth: isSelected }));
    };
    var handleSelectedCellularData = function (isSelected) {
        setState(__assign(__assign({}, state), { cellularData: isSelected }));
    };
    var handleSelectedSpam = function (isSelected) {
        setState(__assign(__assign({}, state), { spam: isSelected }));
    };
    var spamSwitchLabel = state.spam
        ? 'Yes! I would like to receive updates, special offers, and other information from Xandr and its subsidiaries.'
        : 'No! Please keep your messages to yourself!';
    return (react_1.default.createElement("section", null,
        react_1.default.createElement("span", { style: {
                display: 'inline-flex',
                flexDirection: 'column',
                alignItems: 'flex-start',
            } },
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.airplaneMode === true, Label: "Airplane Mode ".concat(state.airplaneMode === true ? 'Activated' : 'Deactivated'), onSelect: handleSelectedAirplaneMode, style: style })),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.bluetooth === true, Label: "Bluetooth ".concat(state.bluetooth === true ? 'Enabled' : 'Disabled'), onSelect: handleSelectedBluetooth, style: style })),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.cellularData === true, Label: "".concat(state.cellularData ? 'Use' : 'Do Not Use', " Cellular Data"), onSelect: handleSelectedCellularData, style: style }))),
        react_1.default.createElement("br", null),
        react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: state.spam === true, onSelect: handleSelectedSpam, style: style }),
            react_1.default.createElement(SwitchLabeled_1.default.Label, null, spamSwitchLabel))));
};
exports.InteractiveWithChangingLabels = InteractiveWithChangingLabels;
/* Label As Prop */
var LabelAsProp = function (args) {
    var style = {
        marginRight: '5px',
    };
    return (react_1.default.createElement("section", null,
        react_1.default.createElement("section", { style: {
                display: 'inline-flex',
                flexDirection: 'column',
                alignItems: 'flex-start',
            } },
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { Label: 'Just text', style: style })),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { Label: react_1.default.createElement("span", null, "HTML element"), style: style })),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { Label: [
                    'Text in an array',
                    'Only the first value in the array is used',
                    'The rest of these should be ignored',
                ], style: style })),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { Label: [
                    react_1.default.createElement("span", { key: '1' }, "HTML element in an array"),
                    react_1.default.createElement("span", { key: '2' }, "Again only the first value in the array is used"),
                    react_1.default.createElement("span", { key: '3' }, "The rest should not be rendered"),
                ], style: style })))));
};
exports.LabelAsProp = LabelAsProp;
/* States */
var States = function (args) {
    var style = {
        marginBottom: '3px',
        marginRight: '13px',
    };
    return (react_1.default.createElement("section", { style: {
            display: 'inline-flex',
            flexDirection: 'column',
            alignItems: 'flex-start',
        } },
        react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { style: style }),
            react_1.default.createElement(SwitchLabeled_1.default.Label, null, "(default props)")),
        react_1.default.createElement("section", null,
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isSelected: true, style: style }),
                react_1.default.createElement(SwitchLabeled_1.default.Label, null, "Selected")),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isDisabled: true, style: style }),
                react_1.default.createElement(SwitchLabeled_1.default.Label, null, "Disabled")),
            react_1.default.createElement(SwitchLabeled_1.default, __assign({}, args, { isDisabled: true, isSelected: true, style: style }),
                react_1.default.createElement(SwitchLabeled_1.default.Label, null, "Disabled & selected")))));
};
exports.States = States;
//# sourceMappingURL=SwitchLabeled.stories.js.map