"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Panel = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var style_helpers_1 = require("../../util/style-helpers");
var component_types_1 = require("../../util/component-types");
var cx = style_helpers_1.lucidClassNames.bind('&-Panel');
var bool = prop_types_1.default.bool, node = prop_types_1.default.node, object = prop_types_1.default.object, string = prop_types_1.default.string;
var PanelHeader = function (_props) { return null; };
PanelHeader.displayName = 'Panel.Header';
PanelHeader.peek = {
    description: "Content displayed at the top of the panel.",
};
PanelHeader.propTypes = {
    description: string,
    children: node,
};
PanelHeader.propName = 'Header';
var PanelFooter = function (_props) { return null; };
PanelFooter.displayName = 'Panel.Footer';
PanelFooter.peek = {
    description: "Content displayed at the bottom of the panel.",
};
PanelFooter.propTypes = {
    description: string,
    children: node,
};
PanelFooter.propName = 'Footer';
var defaultProps = {
    isGutterless: false,
    hasMargin: true,
    isScrollable: true,
};
var Panel = function (props) {
    var children = props.children, className = props.className, isGutterless = props.isGutterless, hasMargin = props.hasMargin, style = props.style, isScrollable = props.isScrollable, passThroughs = __rest(props, ["children", "className", "isGutterless", "hasMargin", "style", "isScrollable"]);
    var headerChildProp = lodash_1.default.first(lodash_1.default.map((0, component_types_1.findTypes)(props, exports.Panel.Header), 'props'));
    var footerChildProp = lodash_1.default.first(lodash_1.default.map((0, component_types_1.findTypes)(props, exports.Panel.Footer), 'props'));
    return (react_1.default.createElement("div", __assign({}, passThroughs, { className: cx('&', className, {
            '&-is-not-gutterless': !isGutterless,
            '&-has-margin': hasMargin,
            '&-is-scrollable': isScrollable,
        }), style: style }),
        headerChildProp ? (react_1.default.createElement("header", __assign({}, headerChildProp, { className: cx('&-Header', headerChildProp.className) }))) : null,
        react_1.default.createElement("section", { className: cx('&-content') }, children),
        footerChildProp ? (react_1.default.createElement("footer", __assign({}, footerChildProp, { className: cx('&-Footer', footerChildProp.className) }))) : null));
};
exports.Panel = Panel;
exports.Panel.defaultProps = defaultProps;
exports.Panel.displayName = 'Panel';
exports.Panel.peek = {
    description: "`Panel` is used to wrap content to better organize elements in window.",
    categories: ['layout'],
};
exports.Panel.propTypes = {
    /**
        Appended to the component-specific class names set on the root element.
    */
    className: string,
    /*
     *Child Element* - Header contents. Only one \`Header\` is used.
     */
    Header: node,
    /**
     *Child Element* - Footer contents. Only one \`Footer\` is used.
     */
    Footer: node,
    /**
        Generally you should only have a single child element so the centering
        works correctly.
    */
    children: node,
    /**
        If set to true, creates a content section with no padding.
    */
    isGutterless: bool,
    /**
        Styles that are passed through to root element.
    */
    style: object,
    /**
        If set to true, makes content overflow scrollable, when Panel has a set
        height.
    */
    isScrollable: bool,
};
exports.Panel.Header = PanelHeader;
exports.Panel.Footer = PanelFooter;
exports.default = exports.Panel;
//# sourceMappingURL=Panel.js.map