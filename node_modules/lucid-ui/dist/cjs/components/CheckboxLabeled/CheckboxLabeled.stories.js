"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LabelAsChild = exports.HTMLElementInAnArray = exports.TextInAnArray = exports.HTMLElement = exports.LabelAsProp = exports.DisabledSelected = exports.Selected = exports.Disabled = exports.Basic = void 0;
var react_1 = __importStar(require("react"));
var CheckboxLabeled_1 = __importDefault(require("./CheckboxLabeled"));
exports.default = {
    title: 'Controls/CheckboxLabeled',
    component: CheckboxLabeled_1.default,
    subcomponents: { 'CheckboxLabeled.Label': CheckboxLabeled_1.default.Label },
    parameters: {
        docs: {
            description: {
                component: CheckboxLabeled_1.default.peek.description,
            },
        },
    },
};
var Template = function (args) {
    var _a = (0, react_1.useState)(args.isSelected || false), selected = _a[0], setSelected = _a[1];
    return (react_1.default.createElement(CheckboxLabeled_1.default, __assign({}, args, { isSelected: selected, onSelect: function () { return setSelected(!selected); } })));
};
exports.Basic = Template.bind({});
exports.Basic.args = {
    title: 'Default',
    Label: 'Default',
};
exports.Disabled = Template.bind({});
exports.Disabled.args = {
    title: 'Disabled',
    Label: 'Disabled',
    isDisabled: true,
};
exports.Selected = Template.bind({});
exports.Selected.args = {
    title: 'Selected',
    Label: 'Selected',
    isSelected: true,
};
exports.DisabledSelected = Template.bind({});
exports.DisabledSelected.args = {
    title: 'Disabled Selected',
    Label: 'Disabled Selected',
    isDisabled: true,
    isSelected: true,
};
exports.LabelAsProp = Template.bind({});
exports.LabelAsProp.args = {
    Label: 'Label as prop',
    title: 'Label as prop',
};
exports.HTMLElement = Template.bind({});
exports.HTMLElement.args = {
    Label: react_1.default.createElement("span", null, "HTML element"),
    title: 'HTML element',
};
exports.TextInAnArray = Template.bind({});
exports.TextInAnArray.args = {
    Label: [
        'Text in an array',
        'Only the first value in the array is used',
        'The rest of these should be ignored',
    ],
    title: 'Text in an array',
};
exports.HTMLElementInAnArray = Template.bind({});
exports.HTMLElementInAnArray.args = {
    Label: [
        react_1.default.createElement("span", { key: '1' }, "HTML element in an array"),
        react_1.default.createElement("span", { key: '2' }, "Again only the first value in the array is used"),
        react_1.default.createElement("span", { key: '3' }, "The rest should not be rendered"),
    ],
    title: 'HTML element in an array',
};
var LabelAsChild = function (args) {
    var _a = (0, react_1.useState)(args.isSelected || false), selected = _a[0], setSelected = _a[1];
    return (react_1.default.createElement(CheckboxLabeled_1.default, __assign({}, args, { isSelected: selected, onSelect: function () { return setSelected(!selected); } }),
        react_1.default.createElement(CheckboxLabeled_1.default.Label, null,
            react_1.default.createElement("span", null, "HTML element as Child"))));
};
exports.LabelAsChild = LabelAsChild;
exports.LabelAsChild.args = {
    title: 'Label as Child',
};
//# sourceMappingURL=CheckboxLabeled.stories.js.map