"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmptyStateWrapper = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var component_types_1 = require("../../util/component-types");
var style_helpers_1 = require("../../util/style-helpers");
var LoadingIndicator_1 = __importDefault(require("../LoadingIndicator/LoadingIndicator"));
var OverlayWrapper_1 = __importStar(require("../OverlayWrapper/OverlayWrapper"));
var cx = style_helpers_1.lucidClassNames.bind('&-EmptyStateWrapper');
var any = prop_types_1.default.any, bool = prop_types_1.default.bool, node = prop_types_1.default.node, string = prop_types_1.default.string;
var EmptyStateWrapperBody = function (_props) {
    return null;
};
var EmptyStateWrapperTitle = function (_props) {
    return null;
};
var nonPassthroughs = [
    'className',
    'children',
    'isEmpty',
    'isLoading',
    'anchorMessage',
    'Body',
    'Title',
    'initialState',
    'callbackId',
];
var defaultProps = {
    isEmpty: false,
    isLoading: false,
    anchorMessage: false,
};
var EmptyStateWrapper = function (props) {
    var children = props.children, className = props.className, isEmpty = props.isEmpty, isLoading = props.isLoading, anchorMessage = props.anchorMessage, passThroughs = __rest(props, ["children", "className", "isEmpty", "isLoading", "anchorMessage"]);
    var emptyMessageBodyProp = lodash_1.default.get((0, component_types_1.getFirst)(props, EmptyStateWrapperBody), 'props');
    var emptyMessageTitleProp = lodash_1.default.get((0, component_types_1.getFirst)(props, EmptyStateWrapperTitle), 'props', { children: 'You have no data.' });
    return isLoading ? (react_1.default.createElement(LoadingIndicator_1.default, __assign({ className: cx('&', className), isLoading: true }, lodash_1.default.omit(passThroughs, nonPassthroughs), { anchorMessage: anchorMessage }), children)) : (react_1.default.createElement(OverlayWrapper_1.default, __assign({ className: cx('&', className), hasOverlay: false, isVisible: isEmpty, anchorMessage: anchorMessage }, lodash_1.default.omit(passThroughs, nonPassthroughs)),
        react_1.default.createElement(OverlayWrapper_1.OverlayWrapperMessage, { className: cx('&-message-container') },
            react_1.default.createElement("div", { className: cx('&-message-header') }),
            react_1.default.createElement("div", { className: cx('&-message-contents') },
                react_1.default.createElement("header", __assign({}, emptyMessageTitleProp, { className: cx('&-message-title', emptyMessageTitleProp.className) })),
                emptyMessageBodyProp && react_1.default.createElement("div", __assign({}, emptyMessageBodyProp)))),
        children));
};
exports.EmptyStateWrapper = EmptyStateWrapper;
exports.EmptyStateWrapper._isPrivate = true;
exports.EmptyStateWrapper.peek = {
    description: "A wrapper which can display either a `LoadingIndicator` or `OverlayWrapper`.",
    categories: ['utility'],
    madeFrom: ['LoadingIndicator', 'OverlayWrapper'],
};
exports.EmptyStateWrapper.displayName = 'EmptyStateWrapper';
exports.EmptyStateWrapper.defaultProps = defaultProps;
exports.EmptyStateWrapper.propTypes = {
    /**
        Class names that are appended to the defaults.
    */
    className: string,
    /**
        Any valid React children.
    */
    children: node,
    /**
        Controls the visibility of the \`EmptyMessage\`.
    */
    isEmpty: bool,
    /**
        Controls the visibility of the \`LoadingMessage\`.
    */
    isLoading: bool,
    /**
        Position the \`EmptyMessage\` and \`LoadingMessage\` near the top of the container.
    */
    anchorMessage: bool,
    /**
     * Child Element* The element to display in the body of the overlay.
     */
    Body: any,
    /**
     * Child Element* The element to display in the title of the overlay.
     */
    Title: any,
};
EmptyStateWrapperBody.displayName = 'EmptyStateWrapper.Body';
exports.EmptyStateWrapper.Body = EmptyStateWrapperBody;
EmptyStateWrapperBody.peek = {
    description: "Body content for the message to display when there is no data.",
};
EmptyStateWrapperBody.propName = 'Body';
EmptyStateWrapperTitle.displayName = 'EmptyStateWrapper.Title';
exports.EmptyStateWrapper.Title = EmptyStateWrapperTitle;
EmptyStateWrapperTitle.peek = {
    description: "Title text for the message to display when there is no data.",
};
EmptyStateWrapperTitle.propName = 'Title';
exports.default = exports.EmptyStateWrapper;
//# sourceMappingURL=EmptyStateWrapper.js.map