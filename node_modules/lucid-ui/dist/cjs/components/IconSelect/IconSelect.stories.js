"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisabledIconSelect = exports.PartiallySelectIcons = exports.SelectMultipleIcons = exports.Single = exports.BasicIconSelect = void 0;
var react_1 = __importStar(require("react"));
var IconSelect_1 = __importDefault(require("./IconSelect"));
var ClockIcon_1 = __importDefault(require("../Icon/ClockIcon/ClockIcon"));
var StopwatchIcon_1 = __importDefault(require("../Icon/StopwatchIcon/StopwatchIcon"));
var SwitchLabeled_1 = __importDefault(require("../SwitchLabeled/SwitchLabeled"));
//ðŸ‘‡ Provide Storybook with the component name, 'section', any subcomponents and a description
exports.default = {
    title: 'Controls/IconSelect',
    component: IconSelect_1.default,
    parameters: {
        docs: {
            description: {
                component: IconSelect_1.default.peek.description,
            },
        },
    },
    args: IconSelect_1.default.defaultProps,
};
var BasicIconSelect = function (args) {
    var _a = (0, react_1.useState)('item2'), selectedIcon = _a[0], setSelectedIcon = _a[1];
    var handleSelect = function (id) {
        // when selected, set `selectedIcon`
        setSelectedIcon(id);
    };
    return (react_1.default.createElement(IconSelect_1.default, __assign({}, args, { onSelect: handleSelect, items: [
            {
                id: 'item1',
                icon: react_1.default.createElement(ClockIcon_1.default, null),
                isSelected: selectedIcon === 'item1',
                label: 'Foo Bar',
            },
            {
                id: 'item2',
                icon: react_1.default.createElement(StopwatchIcon_1.default, null),
                isSelected: selectedIcon === 'item2',
                label: 'Bax Tar',
            },
        ] })));
};
exports.BasicIconSelect = BasicIconSelect;
/** Single: Select One Icon */
var Single = function (args) {
    var _a = (0, react_1.useState)('item2'), selectedIcon = _a[0], setSelectedIcon = _a[1];
    var handleSelect = function (id) {
        // when selected, set `selectedIcon`
        setSelectedIcon(id);
    };
    return (react_1.default.createElement(IconSelect_1.default, __assign({}, args, { onSelect: handleSelect, kind: 'single', items: [
            {
                id: 'item1',
                icon: react_1.default.createElement(ClockIcon_1.default, null),
                isSelected: selectedIcon === 'item1',
                label: 'Foo Bar',
            },
            {
                id: 'item2',
                icon: react_1.default.createElement(StopwatchIcon_1.default, null),
                isSelected: selectedIcon === 'item2',
                label: 'Bax Tar',
            },
        ] })));
};
exports.Single = Single;
/** Select Multiple Icons */
var SelectMultipleIcons = function (args) {
    var _a = (0, react_1.useState)(['item2']), selectedIcons = _a[0], setSelectedIcons = _a[1];
    var isSelected = function (id) {
        return selectedIcons.includes(id);
    };
    var handleSelect = function (selectedId) {
        if (isSelected(selectedId)) {
            // if selected, then remove from list
            setSelectedIcons(selectedIcons.filter(function (id) { return id !== selectedId; }));
        }
        else {
            // add it to the list
            setSelectedIcons(__spreadArray(__spreadArray([], selectedIcons, true), [selectedId], false));
        }
    };
    return (react_1.default.createElement(IconSelect_1.default, __assign({}, args, { onSelect: handleSelect, kind: 'multiple', items: [
            {
                id: 'item1',
                icon: react_1.default.createElement(ClockIcon_1.default, null),
                isSelected: isSelected('item1'),
                label: 'Foo Bar',
            },
            {
                id: 'item2',
                icon: react_1.default.createElement(StopwatchIcon_1.default, null),
                isSelected: isSelected('item2'),
                label: 'Bax Tar',
            },
        ] })));
};
exports.SelectMultipleIcons = SelectMultipleIcons;
/** Partially Select Icons */
var PartiallySelectIcons = function (args) {
    var _a = (0, react_1.useState)([
        { id: 'item2', isPartial: true },
    ]), selectedIcons = _a[0], setSelectedIcons = _a[1];
    var isSelected = function (id) {
        //return false;
        return selectedIcons.some(function (_a) {
            var selectedId = _a.id;
            return id === selectedId;
        });
    };
    var isPartiallySelected = function (id) {
        //return false;
        return selectedIcons.some(function (_a) {
            var selectedId = _a.id, isPartial = _a.isPartial;
            return id === selectedId && isPartial;
        });
    };
    var handleSelect = function (selectedId) {
        //const icons = selectedIcons;
        if (isPartiallySelected(selectedId)) {
            // if partially selected, remove from the list
            setSelectedIcons(selectedIcons.filter(function (_a) {
                var id = _a.id;
                return id !== selectedId;
            }));
        }
        else if (isSelected(selectedId)) {
            // if already selected, ensure isPartial is true
            setSelectedIcons(selectedIcons.map(function (_a) {
                var id = _a.id, isPartial = _a.isPartial;
                return ({
                    id: id,
                    isPartial: isPartial || id === selectedId,
                });
            }));
        }
        else {
            // add selected icon to list
            setSelectedIcons(__spreadArray(__spreadArray([], selectedIcons, true), [
                { id: selectedId, isPartial: false },
            ], false));
        }
    };
    return (react_1.default.createElement("section", null,
        react_1.default.createElement(IconSelect_1.default, __assign({}, args, { onSelect: handleSelect, items: [
                {
                    id: 'item1',
                    icon: react_1.default.createElement(ClockIcon_1.default, null),
                    isSelected: isSelected('item1'),
                    isPartial: isPartiallySelected('item1'),
                    label: 'Foo Bar',
                },
                {
                    id: 'item2',
                    icon: react_1.default.createElement(StopwatchIcon_1.default, null),
                    isSelected: isSelected('item2'),
                    isPartial: isPartiallySelected('item2'),
                    label: 'Bax Tar',
                },
            ] }))));
};
exports.PartiallySelectIcons = PartiallySelectIcons;
/** Disabled Icon Select */
var DisabledIconSelect = function (args) {
    var _a = (0, react_1.useState)(['item2']), selectedIcons = _a[0], setSelectedIcons = _a[1];
    var _b = (0, react_1.useState)(true), isDisabled = _b[0], setIsDisabled = _b[1];
    var isSelected = function (id) {
        return selectedIcons.includes(id);
    };
    var handleSelect = function (selectedId) {
        if (isSelected(selectedId)) {
            // if selected, then remove from the list
            setSelectedIcons(selectedIcons.filter(function (id) { return id !== selectedId; }));
        }
        else {
            // add it to the list
            setSelectedIcons(__spreadArray(__spreadArray([], selectedIcons, true), [selectedId], false));
        }
    };
    var handleToggleDisabled = function () {
        setIsDisabled(!isDisabled);
    };
    return (react_1.default.createElement("section", null,
        react_1.default.createElement(SwitchLabeled_1.default, { Label: "IconSelect ".concat(isDisabled ? 'Disabled' : 'Enabled'), isSelected: !isDisabled, onSelect: handleToggleDisabled }),
        react_1.default.createElement(IconSelect_1.default, __assign({}, args, { isDisabled: isDisabled, onSelect: handleSelect, items: [
                {
                    id: 'item1',
                    icon: react_1.default.createElement(ClockIcon_1.default, null),
                    isSelected: isSelected('item1'),
                    label: 'Always Disabled',
                    isDisabled: true,
                },
                {
                    id: 'item2',
                    icon: react_1.default.createElement(StopwatchIcon_1.default, null),
                    isSelected: isSelected('item2'),
                    label: 'Bax Tar',
                },
            ] }))));
};
exports.DisabledIconSelect = DisabledIconSelect;
//# sourceMappingURL=IconSelect.stories.js.map