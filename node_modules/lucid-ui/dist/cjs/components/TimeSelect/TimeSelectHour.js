"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var style_helpers_1 = require("../../util/style-helpers");
var TimeSelectInput_1 = __importDefault(require("./TimeSelectInput"));
var cx = style_helpers_1.lucidClassNames.bind('&-TimeSelect');
var getCleanedHour = function (partialCleanedHour) {
    return partialCleanedHour < 0
        ? 23
        : partialCleanedHour > 23
            ? 0
            : partialCleanedHour;
};
var getCleanedAMHour = function (nextHour) {
    var partialCleanedHour = nextHour > 12 ? nextHour - 12 : nextHour < 0 ? nextHour + 12 : nextHour;
    return getCleanedHour(partialCleanedHour);
};
var getCleanedPMHour = function (nextHour) {
    var partialCleanedHour = nextHour === 12 ? 12 : nextHour > 12 ? nextHour : nextHour + 12;
    return getCleanedHour(partialCleanedHour);
};
var TimeSelectHour = function (_a) {
    var hour = _a.hour, is24HourClock = _a.is24HourClock, time = _a.time, isAM = _a.isAM, isDisabled = _a.isDisabled, onChange = _a.onChange;
    var onHourChange = (0, react_1.useCallback)(function (nextHourString) {
        var nextHour = +nextHourString;
        var updatedTime = new Date(time);
        if (is24HourClock) {
            var cleanedNextHour = nextHour < 0 ? -1 : nextHour > 23 ? 24 : nextHour;
            updatedTime.setHours(cleanedNextHour);
        }
        else {
            var nextHouris12 = nextHour === 12;
            var shouldRollOver = hour === 11 && nextHouris12;
            var shouldRollBack = hour === 12 && nextHour === 11;
            var cleanedHour = void 0;
            if (shouldRollOver) {
                cleanedHour = isAM ? 12 : 24;
            }
            else if (shouldRollBack) {
                cleanedHour = isAM ? -1 : 11;
            }
            else {
                cleanedHour = isAM
                    ? getCleanedAMHour(nextHour)
                    : getCleanedPMHour(nextHour);
            }
            updatedTime.setHours(cleanedHour);
        }
        onChange(updatedTime);
    }, [time, is24HourClock, isAM, hour]);
    return (react_1.default.createElement(TimeSelectInput_1.default, { className: cx('&-time-hour'), value: hour, name: 'Hour', onChange: onHourChange, disabled: isDisabled }));
};
exports.default = TimeSelectHour;
//# sourceMappingURL=TimeSelectHour.js.map