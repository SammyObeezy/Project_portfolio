"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var TimeSelectInput_1 = __importDefault(require("./TimeSelectInput"));
var shouldGetNextMinuteStep = function (minute, nextMinute) {
    return (minute === nextMinute + 15 ||
        minute === nextMinute - 15 ||
        nextMinute > 59 ||
        nextMinute < 0);
};
var getNextMinuteStep = function (nextMinute) {
    return [-15, 0, 15, 30, 45, 60].reduce(function (prev, curr) {
        return Math.abs(curr - nextMinute) < Math.abs(prev - nextMinute)
            ? curr
            : prev;
    });
};
var TimeSelectMinute = function (_a) {
    var minute = _a.minute, time = _a.time, isDisabled = _a.isDisabled, onChange = _a.onChange;
    var onMinuteChange = (0, react_1.useCallback)(function (nextMinuteString) {
        var nextMinute = +nextMinuteString;
        var updatedTime = new Date(time);
        var shouldGetNextStep = shouldGetNextMinuteStep(minute, nextMinute);
        var cleanedMinute = shouldGetNextStep
            ? getNextMinuteStep(nextMinute)
            : nextMinute;
        updatedTime.setMinutes(cleanedMinute);
        onChange(updatedTime);
    }, [time, minute]);
    return (react_1.default.createElement(TimeSelectInput_1.default, { value: minute, name: 'Minute', onChange: onMinuteChange, disabled: isDisabled, step: 15 }));
};
exports.default = TimeSelectMinute;
//# sourceMappingURL=TimeSelectMinute.js.map