"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarningLightIcon = void 0;
var lodash_1 = require("lodash");
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var Icon_1 = __importDefault(require("../Icon"));
var style_helpers_1 = require("../../../util/style-helpers");
var cx = style_helpers_1.lucidClassNames.bind('&-WarningLightIcon');
var iconPropTypes = {
    /** Classes that are appended to the component defaults. This prop is run
        through the \`classnames\` library. */
    className: prop_types_1.default.string,
    /** Size variations of the icons. \`size\` directly effects height and width
        but the developer should also be conscious of the relationship with
        \`viewBox\`. */
    size: prop_types_1.default.number,
    /** Size handles width and height, whereas \`width\` can manually override the width that would be set by size. */
    width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /** Size handles width and height, whereas \`height\` can manually override the height that would be set by size. */
    height: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /** \`viewBox\` is very important for SVGs. You can think of \`viewBox\` as
        the "artboard" for our SVG while \`size\` is the presented height and
        width. */
    viewBox: prop_types_1.default.string,
    /** Any valid SVG aspect ratio. */
    aspectRatio: prop_types_1.default.string,
    /** Adds styling that makes the icon appear clickable. */
    isClickable: prop_types_1.default.bool,
    /** Adds styling that makes the icon appear disabled.  Also forces
        isClickable to be false. */
    isDisabled: prop_types_1.default.bool,
    /** Called when the user clicks the \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onClick: prop_types_1.default.func,
    /** Called when the user clicks an active, clickable \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onSelect: prop_types_1.default.func,
    /** Any valid React children. */
    children: prop_types_1.default.element,
    /** Sets the color of the Icon.  May not be applicable for icons that are tied
        to specific colors (e.g. DangerIcon). */
    color: prop_types_1.default.oneOf([
        'neutral-dark',
        'neutral-light',
        'primary',
        'white',
        'success',
        'warning',
        'secondary-one',
        'secondary-two',
        'secondary-three',
    ]),
};
var WarningLightIcon = function (_a) {
    var className = _a.className, isClickable = _a.isClickable, isDisabled = _a.isDisabled, passThroughs = __rest(_a, ["className", "isClickable", "isDisabled"]);
    return (react_1.default.createElement(Icon_1.default, __assign({}, (0, lodash_1.omit)(passThroughs, ['initialState']), { isClickable: isClickable, isDisabled: isDisabled, className: cx('&', isDisabled && '&-is-disabled', isClickable && '&-is-clickable', className) }),
        react_1.default.createElement("path", { className: cx('&-background'), d: 'M.5 15h15L8 .5z' }),
        react_1.default.createElement("path", { className: cx('&-mark'), d: 'M7.99 5v4' }),
        react_1.default.createElement("circle", { className: cx('&-mark'), cx: '7.99', cy: '12', r: '.293' })));
};
exports.WarningLightIcon = WarningLightIcon;
exports.WarningLightIcon.displayName = 'WarningLightIcon';
exports.WarningLightIcon.peek = {
    description: "\n\t\tDEPRECATED: this component should not be used and will be removed from the library in a future release.\n\t\t\n\t\tDiet version.\n\t",
    categories: ['visual design', 'icons'],
    extend: 'Icon',
    madeFrom: ['Icon'],
};
exports.WarningLightIcon.propTypes = iconPropTypes;
exports.WarningLightIcon.defaultProps = Icon_1.default.defaultProps;
exports.default = exports.WarningLightIcon;
//# sourceMappingURL=WarningLightIcon.js.map