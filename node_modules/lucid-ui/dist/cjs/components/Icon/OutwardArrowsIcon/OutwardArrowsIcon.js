"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutwardArrowsIcon = exports.outwardArrowsIconPropTypes = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var Icon_1 = __importDefault(require("../Icon"));
var style_helpers_1 = require("../../../util/style-helpers");
var cx = style_helpers_1.lucidClassNames.bind('&-OutwardArrowsIcon');
var paths = {
    horizontal: react_1.default.createElement("path", { d: 'M4 8h8m-1.5 2l2-2-2-2m-5 4l-2-2 2-2m-5-2.5v9m15-9v9' }),
    vertical: react_1.default.createElement("path", { d: 'M8 4v8m-2-1.5l2 2 2-2m-4-5l2-2 2 2m2.5-5h-9m9 15h-9' }),
    diagonal: (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("path", { d: 'M11.828 4.172l-7.656 7.656m-.354-2.474v2.828h2.828m2.708-8.364h2.828v2.828' }),
        react_1.default.createElement("path", { d: 'M.5 8.5v7h7m8-8v-7h-7' }))),
};
exports.outwardArrowsIconPropTypes = {
    /**	Determines the kind of arrows you want to display. \`horizontal\` is
        usually used for width. \`vertical\` is usually used for height.
        \`diagonal\` is usually used for aspect ratio. */
    kind: prop_types_1.default.oneOf(['horizontal', 'vertical', 'diagonal']),
    /** Size variations of the icons. \`size\` directly effects height and width
        but the developer should also be conscious of the relationship with
        \`viewBox\`. */
    size: prop_types_1.default.number,
    /** Size handles width and height, whereas \`width\` can manually override the width that would be set by size. */
    width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /** Size handles width and height, whereas \`height\` can manually override the height that would be set by size. */
    height: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /** \`viewBox\` is very important for SVGs. You can think of \`viewBox\` as
        the "artboard" for our SVG while \`size\` is the presented height and
        width. */
    viewBox: prop_types_1.default.string,
    /** Sets the color of the Icon.  May not be applicable for icons that are tied
        to specific colors (e.g. DangerIcon). */
    color: prop_types_1.default.oneOf([
        'neutral-dark',
        'neutral-light',
        'neutral-extra-light',
        'primary',
        'white',
        'success',
        'warning',
        'secondary-one',
        'secondary-two',
        'secondary-three',
        'secondary-five',
    ]),
    /** Any valid SVG aspect ratio. */
    aspectRatio: prop_types_1.default.string,
    /** Adds styling that makes the icon appear clickable. */
    isClickable: prop_types_1.default.bool,
    /** Adds styling that makes the icon appear disabled.  Also forces
        isClickable to be false. */
    isDisabled: prop_types_1.default.bool,
    /** Called when the user clicks the \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onClick: prop_types_1.default.func,
    /** Called when the user clicks an active, clickable \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onSelect: prop_types_1.default.func,
    /** Any valid React children. */
    children: prop_types_1.default.element,
    /** Classes that are appended to the component defaults. This prop is run
        through the \`classnames\` library. */
    className: prop_types_1.default.string,
};
var OutwardArrowsIcon = function (_a) {
    var className = _a.className, _b = _a.kind, kind = _b === void 0 ? 'horizontal' : _b, passThroughs = __rest(_a, ["className", "kind"]);
    return (react_1.default.createElement(Icon_1.default, __assign({}, lodash_1.default.omit(passThroughs, ['initialState']), { className: cx('&', className) }), paths[kind]));
};
exports.OutwardArrowsIcon = OutwardArrowsIcon;
exports.OutwardArrowsIcon.displayName = 'OutwardArrowsIcon';
exports.OutwardArrowsIcon.propTypes = exports.outwardArrowsIconPropTypes;
exports.OutwardArrowsIcon.defaultProps = Icon_1.default.defaultProps;
exports.default = exports.OutwardArrowsIcon;
//# sourceMappingURL=OutwardArrowsIcon.js.map