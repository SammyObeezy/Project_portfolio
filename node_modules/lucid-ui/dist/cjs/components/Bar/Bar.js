"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bar = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var style_helpers_1 = require("../../util/style-helpers");
var chartConstants = __importStar(require("../../constants/charts"));
var cx = style_helpers_1.lucidClassNames.bind('&-Bar');
var number = prop_types_1.default.number, bool = prop_types_1.default.bool, string = prop_types_1.default.string, object = prop_types_1.default.object;
var defaultProps = {
    x: 0,
    y: 0,
    height: 0,
    width: 0,
    color: chartConstants.COLOR_0,
    hasStroke: false,
};
var Bar = function (props) {
    var _a;
    var className = props.className, color = props.color, hasStroke = props.hasStroke, height = props.height, width = props.width, style = props.style, x = props.x, y = props.y, passThroughs = __rest(props, ["className", "color", "hasStroke", "height", "width", "style", "x", "y"]);
    var isCustomColor = lodash_1.default.startsWith(color, '#');
    var colorStyle = isCustomColor ? { fill: color } : null;
    return (react_1.default.createElement("rect", __assign({}, passThroughs, { className: cx(className, '&', (_a = {
                '&-has-stroke': hasStroke
            },
            _a["&-".concat(color)] = !isCustomColor,
            _a)), x: x, y: y, height: height, width: width, style: __assign(__assign({}, style), colorStyle) })));
};
exports.Bar = Bar;
exports.Bar.defaultProps = defaultProps;
exports.Bar.displayName = 'Bar';
exports.Bar.peek = {
    description: "*For use within an `svg`*. A `Bar` is typically used for a `Bar Chart` and is pretty much a thin wrapper around an `svg rect`.",
    categories: ['visualizations', 'geoms'],
};
exports.Bar.propTypes = {
    /**
        Passed through to the root element.
    */
    style: object,
    /**
        Appended to the component-specific class names set on the root element.
    */
    className: string,
    /**
        x coordinate.
    */
    x: number,
    /**
        y coordinate.
    */
    y: number,
    /**
        Height of the bar.
    */
    height: prop_types_1.default.oneOfType([number, string]),
    /**
        Width of the bar.
    */
    width: prop_types_1.default.oneOfType([number, string]),
    /**
        Determines if the bar has a white stroke around it.
    */
    hasStroke: bool,
    /**
        Strings should match an existing color class unless they start with a '#'
        for specific colors. E.g.:

        - \`COLOR_0\`
        - \`COLOR_GOOD\`
        - \`'#123abc'\`
    */
    color: string,
};
exports.default = exports.Bar;
//# sourceMappingURL=Bar.js.map