"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Typography = exports.ElementTypes = void 0;
var lodash_1 = __importDefault(require("lodash"));
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var style_helpers_1 = require("../../util/style-helpers");
var cx = style_helpers_1.lucidClassNames.bind('&-Typography');
var node = prop_types_1.default.node, string = prop_types_1.default.string, oneOf = prop_types_1.default.oneOf;
var ElementTypes;
(function (ElementTypes) {
    ElementTypes["p"] = "p";
    ElementTypes["tabular"] = "p";
    ElementTypes["h1"] = "h1";
    ElementTypes["h2"] = "h2";
    ElementTypes["h3"] = "h3";
    ElementTypes["a"] = "a";
    ElementTypes["pre"] = "pre";
    ElementTypes["code"] = "code";
    ElementTypes["kbd"] = "kbd";
    ElementTypes["samp"] = "samp";
    ElementTypes["span"] = "span";
})(ElementTypes = exports.ElementTypes || (exports.ElementTypes = {}));
var defaultProps = {
    variant: ElementTypes.p,
};
var Typography = function (props) {
    var children = props.children, className = props.className, variant = props.variant, passThroughs = __rest(props, ["children", "className", "variant"]);
    var Element = ElementTypes[variant ? variant : 'p'];
    return react_1.default.createElement(Element, __assign(__assign({}, passThroughs), { className: cx('&', "&-".concat(variant), className) }), children);
};
exports.Typography = Typography;
exports.Typography.defaultProps = defaultProps;
exports.Typography.displayName = 'Typography';
exports.Typography.peek = {
    description: "A general component for several types of textual `HTML` elements.",
    categories: ['text'],
};
exports.Typography.propTypes = {
    /**
        Can contain elements or nested \`Typography\` components.
    */
    children: node,
    /**
        Appended to the component-specific class names set on the root element.
    */
    className: string,
    /**
        This prop defines the type of text that will be displayed.
        It may be an actual HTML element or something with extra semantic meaning.
    */
    variant: oneOf(lodash_1.default.keys(ElementTypes)).isRequired,
};
exports.default = exports.Typography;
//# sourceMappingURL=Typography.js.map