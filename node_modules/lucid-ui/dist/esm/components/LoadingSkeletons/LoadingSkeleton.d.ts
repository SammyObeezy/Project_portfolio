import React, { CSSProperties, FunctionComponent } from 'react';
import { StandardProps } from '../../util/component-types';
export interface IStandardSkeleton extends StandardProps {
    className?: string;
    /** LoadingSkeleton height. */
    height?: number | string;
    /** LoadingSkeleton width. */
    width?: number | string;
}
export interface ILoadingSkeletonProps extends IStandardSkeleton {
    /** Allows custom skeleton to be injected. */
    Skeleton?: FunctionComponent<IStandardSkeleton>;
    /** Controls the visibility of the `LoadingSkeleton`. */
    isLoading: boolean;
    /** Children controls wrapped by skeleton. */
    children?: React.ReactNode;
    /** Displays LoadingSkeleton custom header. */
    header?: React.ReactNode;
    style?: CSSProperties;
    /** Controls if LoadingSkeleton is wrapped in Panel. */
    isPanel?: boolean;
    /** Controls if built-in LoadingIndicator has overlay. Does not apply to other skeletons */
    hasOverlay?: boolean;
    /** Style variations for the overlay behind the loading indicator for built-in LoadingIndicator. Does not apply to other skeletons */
    overlayKind?: 'light' | 'dark';
    /** Controls if LoadingSkeleton replicated in number of rows. Default = 1. */
    numRows?: number;
    /** Controls if LoadingSkeleton replicated in number of columns. Default = 1. */
    numColumns?: number;
    marginBottom?: string | number | undefined;
    marginTop?: string | number | undefined;
    marginLeft?: string | number | undefined;
    marginRight?: string | number | undefined;
}
export declare const LoadingSkeleton: FunctionComponent<ILoadingSkeletonProps>;
export default LoadingSkeleton;
//# sourceMappingURL=LoadingSkeleton.d.ts.map