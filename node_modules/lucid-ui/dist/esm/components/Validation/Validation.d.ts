import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
/** Validation Error */
export interface IValidationErrorProps extends StandardProps {
    description?: string;
}
/** Validation */
export interface IValidationProps extends StandardProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
    Error?: React.ReactNode;
}
export declare const Validation: {
    (props: IValidationProps): React.ReactElement;
    displayName: string;
    peek: {
        description: string;
        categories: string[];
    };
    propTypes: {
        /**
            In most cases this will be a string, but it also accepts any valid React
            element. If this is a falsey value, then no error message will be
            displayed.  If this is the literal \`true\`, it will add the
            \`-is-error\` class to the wrapper div, but not render the
            \`-error-content\` \`div\`.
        */
        Error: PropTypes.Requireable<any>;
        /**
            Classes that are appended to the component defaults. This prop is run
            through the \`classnames\` library.
        */
        className: PropTypes.Requireable<string>;
        /**
            Any valid React children.
        */
        children: PropTypes.Validator<any>;
    };
    Error: {
        (_props: IValidationErrorProps): null;
        displayName: string;
        peek: {
            description: string;
        };
        propName: string;
        propTypes: {
            description: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<any>;
        };
    };
};
export default Validation;
//# sourceMappingURL=Validation.d.ts.map