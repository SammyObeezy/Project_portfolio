import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export interface IScrollTableProps extends StandardProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
    /** Set the width of the Table inside the scrollable container. */
    tableWidth?: number | string;
    /** Set the Table contents to not allow word wrapping. */
    hasWordWrap: boolean;
    /** render the table with borders on the outer edge. */
    hasBorder: boolean;
}
export declare const ScrollTable: {
    (props: IScrollTableProps): React.ReactElement;
    defaultProps: {
        hasWordWrap: boolean;
        hasBorder: boolean;
    };
    displayName: string;
    peek: {
        description: string;
        categories: string[];
        madeFrom: string[];
    };
    Thead: {
        (props: Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>, "style" | "className" | "children"> & import("../Table/Table").ITheadPropsRaw): JSX.Element;
        displayName: string;
        peek: {
            description: string;
        };
        propTypes: {
            className: PropTypes.Requireable<any>;
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        };
    };
    Tbody: {
        (props: Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, "style" | "className" | "children"> & import("../Table/Table").ITBodyPropsRaw): JSX.Element;
        displayName: string;
        peek: {
            description: string;
        };
        propTypes: {
            className: PropTypes.Requireable<any>;
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        };
    };
    Tr: {
        (props: Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>, "style" | "className" | "children"> & import("../Table/Table").ITrPropsRaw): JSX.Element;
        defaultProps: {
            isDisabled: boolean;
            isSelected: boolean;
            isActive: boolean;
        };
        displayName: string;
        peek: {
            description: string;
        };
        propTypes: {
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            className: PropTypes.Requireable<any>;
            isDisabled: PropTypes.Requireable<boolean>;
            isSelected: PropTypes.Requireable<boolean>;
            isActive: PropTypes.Requireable<boolean>;
        };
    };
    Th: typeof import("../Table/Table").Th;
    Td: {
        (props: import("../Table/Table").ITdProps): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        displayName: string;
        defaultProps: {
            align: string;
            hasBorderRight: boolean;
            hasBorderLeft: boolean;
            rowSpan: number;
        };
        peek: {
            description: string;
            categories: never[];
            madeFrom: never[];
        };
        propTypes: {
            align: PropTypes.Requireable<string>;
            className: PropTypes.Requireable<any>;
            hasBorderRight: PropTypes.Requireable<boolean>;
            hasBorderLeft: PropTypes.Requireable<boolean>;
            isFirstRow: PropTypes.Requireable<boolean>;
            isLastRow: PropTypes.Requireable<boolean>;
            isFirstCol: PropTypes.Requireable<boolean>;
            isLastCol: PropTypes.Requireable<boolean>;
            isFirstSingle: PropTypes.Requireable<boolean>;
            isEmpty: PropTypes.Requireable<boolean>;
            truncateContent: PropTypes.Requireable<boolean>;
        };
    };
    propTypes: {
        /**
            {Thead, Tbody, Tr, Th, Td} are the child components of Scrolltable, same
            as Table.
        */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
            Class names that are appended to the defaults.
        */
        className: PropTypes.Requireable<string>;
        /**
            Styles that are passed through to the root container.
        */
        style: PropTypes.Requireable<object>;
        /**
            Set the width of the Table inside the scrollable container.
        */
        tableWidth: PropTypes.Requireable<string | number>;
        /**
            Set the Table contents to not allow word wrapping.
        */
        hasWordWrap: PropTypes.Requireable<boolean>;
        /**
            render the table with borders on the outer edge.
        */
        hasBorder: PropTypes.Requireable<boolean>;
    };
};
export default ScrollTable;
//# sourceMappingURL=ScrollTable.d.ts.map