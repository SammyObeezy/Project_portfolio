import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export interface IBreadcrumbItemProps extends StandardProps {
}
export interface IBreadcrumbProps extends StandardProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
    Item?: string | (React.ReactNode & {
        props: IBreadcrumbItemProps;
    });
}
export declare const Breadcrumb: {
    (props: IBreadcrumbProps): React.ReactElement;
    displayName: string;
    peek: {
        description: string;
        categories: string[];
    };
    propTypes: {
        /**
            All children should be \`Breadcrumb.Item\`s. Others are ignored.
        */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
            Appended to the component-specific class names set on the root element.
            Value is run through the \`classnames\` library.
        */
        className: PropTypes.Requireable<any>;
        /**
            A child element that renders a \`li\`.
        */
        Item: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    Item: {
        (_props: IBreadcrumbItemProps): null;
        displayName: string;
        peek: {
            description: string;
        };
        propName: string;
        propTypes: {
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        };
    };
};
export default Breadcrumb;
//# sourceMappingURL=Breadcrumb.d.ts.map