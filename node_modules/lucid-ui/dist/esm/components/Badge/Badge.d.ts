import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export declare enum Kind {
    default = "default",
    primary = "primary",
    success = "success",
    danger = "danger",
    warning = "warning",
    info = "info",
    dark = "dark"
}
export declare enum Type {
    filled = "filled",
    stroke = "stroke"
}
export interface IBadgeProps extends StandardProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {
    kind: keyof typeof Kind;
    /** Fill variations for the `Badge` */
    type: keyof typeof Type;
}
export declare const Badge: {
    (props: IBadgeProps): React.ReactElement;
    defaultProps: {
        kind: Kind;
        type: Type;
    };
    displayName: string;
    peek: {
        description: string;
        categories: string[];
    };
    propTypes: {
        /** class names that are appended to the defaults */
        className: PropTypes.Requireable<string>;
        /** any valid React children */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /** Style variations for the `Badge` */
        kind: PropTypes.Requireable<string>;
        /** Fill style variations for the `Badge` */
        type: PropTypes.Requireable<string>;
    };
};
export default Badge;
//# sourceMappingURL=Badge.d.ts.map