import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export declare enum TagStyle {
    'style-one' = "style-one",
    'style-two' = "style-two",
    'style-three' = "style-three"
}
export declare enum Type {
    filled = "filled",
    stroke = "stroke"
}
export declare enum Size {
    large = "large",
    small = "small"
}
export interface INotchedTagProps extends StandardProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
    /** Style variations. */
    type?: keyof typeof Type;
    /** Size variations. */
    size: keyof typeof Size;
    /** Tag style variations. */
    tagStyle: keyof typeof TagStyle;
}
export declare const NotchedTag: {
    (props: INotchedTagProps): React.ReactElement;
    defaultProps: {
        size: Size;
        tagStyle: TagStyle;
    };
    displayName: string;
    propTypes: {
        /**
            Any valid React children.
        */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        /**
            Style variations.
        */
        type: PropTypes.Requireable<Type>;
        size: PropTypes.Requireable<Size>;
        tagStyle: PropTypes.Requireable<TagStyle>;
        style: PropTypes.Requireable<object>;
    };
    peek: {
        description: string;
        notes: {
            overview: string;
            intendedUse: string;
            technicalRecommendations: string;
        };
        categories: string[];
    };
};
export default NotchedTag;
//# sourceMappingURL=NotchedTag.d.ts.map