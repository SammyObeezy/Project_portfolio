import React from 'react';
import PropTypes from 'prop-types';
import { IOverlayWrapperProps } from '../OverlayWrapper/OverlayWrapper';
export interface ILoadingIndicatorProps extends IOverlayWrapperProps {
    /** Set this to `false` if you don't want the semi-transparent overlay over
        the wrapped content */
    hasOverlay: boolean;
    /** Controls the visibility of the `LoadingMessage` and overlay. */
    isLoading: boolean;
    /** Positions the loading message near the top of the container. By default,
     *  the loading message is vertically aligned to the middle of the container.
     */
    anchorMessage: boolean;
    /** By default, the OverlayMessage is vertically aligned to the middle of the
     *	OverlayWrapper, and the `OverlayWrapper` is the height of the entire content.
     *	Set this to true to position the `OverlayMessage` near the center of the
     *	`OverlayWrapper`, and fix the `OverlayWrapper` to the screen height and width.
     */
    fixedMessage: boolean;
    /** Style variations for the overlay behind the loading indicator. */
    overlayKind: 'light' | 'dark';
}
export declare const LoadingIndicator: {
    (props: ILoadingIndicatorProps): React.ReactElement;
    LoadingMessage: {
        (props: import("../LoadingMessage/LoadingMessage").ILoadingMessageProps): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        Icon: {
            (_props: import("../LoadingMessage/LoadingMessage").ILoadingMessageIconProps): null;
            displayName: string;
            peek: {
                description: string;
            };
            propName: string; /** Positions the loading message near the top of the container. By default,
             *  the loading message is vertically aligned to the middle of the container.
             */
            propTypes: {
                description: PropTypes.Requireable<string>;
                children: PropTypes.Requireable<any>;
            };
        };
        Title: {
            (_props: import("../LoadingMessage/LoadingMessage").ILoadingMessageTitleProps): null;
            displayName: string;
            peek: {
                description: string;
            };
            propName: string;
            propTypes: {
                description: PropTypes.Requireable<string>;
                children: PropTypes.Requireable<any>;
            };
        };
        Body: {
            (_props: import("../LoadingMessage/LoadingMessage").ILoadingMessageBodyProps): null;
            displayName: string;
            peek: {
                description: string;
            };
            propName: string;
            propTypes: {
                description: PropTypes.Requireable<string>;
                children: PropTypes.Requireable<any>;
            };
        };
        _isPrivate: boolean;
        displayName: string;
        peek: {
            description: string;
            categories: string[];
            madeFrom: string[];
        };
        propTypes: {
            className: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            Icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            Title: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            Body: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        };
    };
    displayName: string;
    peek: {
        description: string;
        notes: {
            overview: string;
            intendedUse: string;
            technicalRecommendations: string;
        };
        categories: string[];
        madeFrom: string[];
    };
    propTypes: {
        /**
            Class names that are appended to the defaults.
        */
        className: PropTypes.Requireable<string>;
        /**
            Any valid React children.
        */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
            Set this to \`false\` if you don't want the semi-transparent overlay over
            the wrapped content
      */
        hasOverlay: PropTypes.Requireable<boolean>;
        /**
            Controls the visibility of the \`LoadingMessage\` and overlay.
        */
        isLoading: PropTypes.Requireable<boolean>;
        /**
            Positions the loading message near the top of the container. By default,
            the loading message is vertically aligned to the middle of the container.
        */
        anchorMessage: PropTypes.Requireable<boolean>;
        /**
            By default, the OverlayMessage is vertically aligned to the middle of the
            \`OverlayWrapper\`, and the \`OverlayWrapper\` is the height of the entire content.
            Set this to true to position the \`OverlayMessage\` near the center of the
            \`OverlayWrapper\`, and fix the \`OverlayWrapper\` to the screen height and width.
        */
        fixedMessage: PropTypes.Requireable<boolean>;
        /**
            Style variations for the overlay behind the loading indicator.
        */
        overlayKind: PropTypes.Requireable<string>;
    };
    defaultProps: {
        hasOverlay: boolean;
        isLoading: boolean;
        anchorMessage: boolean;
        fixedMessage: boolean;
        overlayKind: "light";
    };
};
export default LoadingIndicator;
//# sourceMappingURL=LoadingIndicator.d.ts.map