import React from 'react';
import Table from './Table';
import Checkbox from '../Checkbox/Checkbox';
import SuccessIcon from '../Icon/SuccessIcon/SuccessIcon';
import Button from '../Button/Button';
export default {
    title: 'Table/Table',
    component: Table,
    parameters: {
        docs: {
            description: {
                component: Table.peek.description,
            },
        },
    },
    args: Table.defaultProps,
};
export const Basic = (args) => (React.createElement(Table, { ...args },
    React.createElement(Table.Thead, null,
        React.createElement(Table.Tr, null,
            React.createElement(Table.Th, null,
                React.createElement(Checkbox, null)),
            React.createElement(Table.Th, null, "Lorem"),
            React.createElement(Table.Th, null, "Ipsum"),
            React.createElement(Table.Th, null, "Solit"),
            React.createElement(Table.Th, null, "Dolar"))),
    React.createElement(Table.Tbody, null,
        React.createElement(Table.Tr, null,
            React.createElement(Table.Td, null,
                React.createElement(Checkbox, null)),
            React.createElement(Table.Td, null, "Bar"),
            React.createElement(Table.Td, null, "Foo"),
            React.createElement(Table.Td, null, "FooBar"),
            React.createElement(Table.Td, null, "BarFoo")))));
/* Standard */
export const Standard = (args) => {
    const { Thead, Tbody, Tr, Th, Td } = Table;
    return (React.createElement(Table, { ...args },
        React.createElement(Thead, null,
            React.createElement(Tr, null,
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(Checkbox, null)),
                React.createElement(Th, { rowSpan: 2, isSortable: true }, "Lorem."),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Th, { rowSpan: 2 }, "Button"),
                React.createElement(Th, { rowSpan: 2, isSorted: true, sortDirection: 'up' }, "Sorted Column"),
                React.createElement(Th, { colSpan: 3, align: 'center' }, "Alignments")),
            React.createElement(Tr, null,
                React.createElement(Th, { align: 'left' }, "align left"),
                React.createElement(Th, { align: 'center' }, "align center"),
                React.createElement(Th, { align: 'right', isSortable: true, isSorted: true }, "align right"))),
        React.createElement(Tbody, null,
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActive: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Row active"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")))));
};
/* Gray Header */
export const GrayHeader = (args) => {
    const { Thead, Tbody, Tr, Th, Td } = Table;
    return (React.createElement(Table, { ...args, hasLightHeader: false },
        React.createElement(Thead, null,
            React.createElement(Tr, null,
                React.createElement(Th, { rowSpan: 2 }, "RS"),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(Checkbox, null)),
                React.createElement(Th, { rowSpan: 2, isSortable: true }, "Lorem."),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Th, { rowSpan: 2 }, "Button"),
                React.createElement(Th, { rowSpan: 2, isSorted: true, sortDirection: 'up' }, "Sorted Column"),
                React.createElement(Th, { align: 'left' }, "align left"),
                React.createElement(Th, { align: 'center' }, "align center"),
                React.createElement(Th, { align: 'right', isSortable: true, isSorted: true }, "align right"))),
        React.createElement(Tbody, null,
            React.createElement(Tr, null,
                React.createElement(Td, { rowSpan: 14, hasBorderRight: true }, "RS"),
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")))));
};
/* Compressed */
export const Compressed = (args) => {
    const { Thead, Tbody, Tr, Th, Td } = Table;
    return (React.createElement(Table, { ...args, density: 'compressed' },
        React.createElement(Thead, null,
            React.createElement(Tr, null,
                React.createElement(Th, { rowSpan: 2 }, "RS"),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(Checkbox, null)),
                React.createElement(Th, { rowSpan: 2, isSortable: true, isResizable: true }, "Sortable and resizable."),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Th, { rowSpan: 2 }, "Button"),
                React.createElement(Th, { rowSpan: 2, isSorted: true, sortDirection: 'up', isResizable: true }, "Sorted Column"),
                React.createElement(Th, { colSpan: 3, align: 'center' }, "Alignments")),
            React.createElement(Tr, null,
                React.createElement(Th, { align: 'left' }, "align left"),
                React.createElement(Th, { align: 'center', isResizable: true }, "align center"),
                React.createElement(Th, { align: 'right', isSortable: true, isSorted: true }, "align right"))),
        React.createElement(Tbody, null,
            React.createElement(Tr, null,
                React.createElement(Td, { rowSpan: 14, hasBorderRight: true }, "RS"),
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")))));
};
/* With Border */
export const WithBorder = (args) => {
    const { Thead, Tbody, Tr, Th, Td } = Table;
    return (React.createElement(Table, { ...args, hasBorder: true },
        React.createElement(Thead, null,
            React.createElement(Tr, null,
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(Checkbox, null)),
                React.createElement(Th, { rowSpan: 2, isSortable: true }, "Lorem."),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Th, { rowSpan: 2 }, "Button"),
                React.createElement(Th, { rowSpan: 2, isSorted: true, sortDirection: 'up' }, "Sorted Column"),
                React.createElement(Th, { colSpan: 3, align: 'center' }, "Alignments")),
            React.createElement(Tr, null,
                React.createElement(Th, { align: 'left' }, "align left"),
                React.createElement(Th, { align: 'center' }, "align center"),
                React.createElement(Th, { align: 'right', isSortable: true, isSorted: true }, "align right"))),
        React.createElement(Tbody, null,
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text && isActionable"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled && isActionable"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link")),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link")),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link && isActionable")),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link && isActionable")),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isActionable"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled && isActionable"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isActive && isDisabled"),
                React.createElement(Td, null,
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left' }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")))));
};
/* With Empty Column */
export const WithEmptyColumn = (args) => {
    const { Thead, Tbody, Tr, Th, Td } = Table;
    return (React.createElement(Table, { ...args },
        React.createElement(Thead, null,
            React.createElement(Tr, null,
                React.createElement(Th, { rowSpan: 2 }, "RS"),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(Checkbox, null)),
                React.createElement(Th, { rowSpan: 2, isSortable: true }, "Empty"),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Th, { rowSpan: 2 }, "Button"),
                React.createElement(Th, { rowSpan: 2, isSorted: true, sortDirection: 'up' }, "Sorted Column"),
                React.createElement(Th, { colSpan: 3, align: 'center' }, "Alignments")),
            React.createElement(Tr, null,
                React.createElement(Th, { align: 'left' }, "align left"),
                React.createElement(Th, { align: 'center' }, "align center"),
                React.createElement(Th, { align: 'right', isSortable: true, isSorted: true }, "align right"))),
        React.createElement(Tbody, null,
            React.createElement(Tr, null,
                React.createElement(Td, { rowSpan: 14, hasBorderRight: true }, "RS"),
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isActive: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, { isEmpty: true }, "No Data"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")))));
};
/* No Hover */
export const NoHover = (args) => {
    const { Thead, Tbody, Tr, Th, Td } = Table;
    return (React.createElement(Table, { ...args, hasHover: false },
        React.createElement(Thead, null,
            React.createElement(Tr, null,
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(Checkbox, null)),
                React.createElement(Th, { rowSpan: 2, isSortable: true }, "Lorem."),
                React.createElement(Th, { rowSpan: 2 },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Th, { rowSpan: 2 }, "Button"),
                React.createElement(Th, { rowSpan: 2, isSorted: true, sortDirection: 'up' }, "Sorted Column"),
                React.createElement(Th, { colSpan: 3, align: 'center' }, "Alignments")),
            React.createElement(Tr, null,
                React.createElement(Th, { align: 'left' }, "align left"),
                React.createElement(Th, { align: 'center' }, "align center"),
                React.createElement(Th, { align: 'right', isSortable: true, isSorted: true }, "align right"))),
        React.createElement(Tbody, null,
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "Text && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null, "isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, null,
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isActionable: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, null)),
                React.createElement(Td, null,
                    React.createElement("a", { href: '#' }, "isDisabled Link && isActionable")),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small' }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")),
            React.createElement(Tr, { isSelected: true, isDisabled: true, isActionable: true },
                React.createElement(Td, null,
                    React.createElement(Checkbox, { isSelected: true })),
                React.createElement(Td, null, "isSelected && isDisabled && isActionable"),
                React.createElement(Td, { hasBorderLeft: true, hasBorderRight: true },
                    React.createElement(SuccessIcon, null)),
                React.createElement(Td, null,
                    React.createElement(Button, { size: 'small', isDisabled: true }, "button")),
                React.createElement(Td, null, "Sorted Column"),
                React.createElement(Td, { align: 'left', hasBorderLeft: true }, "align left"),
                React.createElement(Td, { align: 'center' }, "align center"),
                React.createElement(Td, { align: 'right' }, "align right")))));
};
//# sourceMappingURL=Table.stories.js.map