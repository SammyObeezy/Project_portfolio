import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export interface IEmptyStateWrapperBodyProps extends StandardProps {
}
export interface IEmptyStateWrapperTitleProps extends StandardProps {
}
export interface IEmptyStateWrapperProps extends StandardProps {
    /** *Child Element* The element to display in the body of the overlay. */
    Body?: React.ReactNode;
    /**	*Child Element* The element to display in the title of the overlay. */
    Title?: React.ReactNode | string;
    /** Controls the visibility of the \`EmptyMessage\`. */
    isEmpty: boolean;
    /** Controls the visibility of the \`LoadingMessage\`. */
    isLoading: boolean;
    /** Position the `EmptyMessage` and `LoadingMessage` near the top of the container. */
    anchorMessage: boolean;
}
export declare const EmptyStateWrapper: {
    (props: IEmptyStateWrapperProps): React.ReactElement;
    _isPrivate: boolean;
    peek: {
        description: string;
        categories: string[];
        madeFrom: string[];
    };
    displayName: string;
    defaultProps: {
        isEmpty: boolean;
        isLoading: boolean;
        anchorMessage: boolean;
    };
    propTypes: {
        /**
            Class names that are appended to the defaults.
        */
        className: PropTypes.Requireable<string>;
        /**
            Any valid React children.
        */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
            Controls the visibility of the \`EmptyMessage\`.
        */
        isEmpty: PropTypes.Requireable<boolean>;
        /**
            Controls the visibility of the \`LoadingMessage\`.
        */
        isLoading: PropTypes.Requireable<boolean>;
        /**
            Position the \`EmptyMessage\` and \`LoadingMessage\` near the top of the container.
        */
        anchorMessage: PropTypes.Requireable<boolean>;
        /**
         * Child Element* The element to display in the body of the overlay.
         */
        Body: PropTypes.Requireable<any>;
        /**
         * Child Element* The element to display in the title of the overlay.
         */
        Title: PropTypes.Requireable<any>;
    };
    Body: {
        (_props: IEmptyStateWrapperBodyProps): null;
        displayName: string;
        peek: {
            description: string;
        };
        propName: string;
    };
    Title: {
        (_props: IEmptyStateWrapperTitleProps): null;
        displayName: string;
        peek: {
            description: string;
        };
        propName: string;
    };
};
export default EmptyStateWrapper;
//# sourceMappingURL=EmptyStateWrapper.d.ts.map