import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export interface IResizerProps extends StandardProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
    /** A function that returns your rendered content. */
    children?: (width: number, height: number) => React.ReactNode;
}
interface IResizerState {
    width: number;
    height: number;
}
declare class Resizer extends React.Component<IResizerProps, IResizerState, {}> {
    static displayName: string;
    static peek: {
        description: string;
        categories: string[];
    };
    static propTypes: {
        /**
            Appended to the component-specific class names set on the root elements.
        */
        className: PropTypes.Requireable<string>;
        /**
            A function that returns your rendered content with the signature:
            \`(width, height) => {}\`
        */
        children: PropTypes.Requireable<(...args: any[]) => any>;
    };
    private _element;
    private resizeDetector;
    state: {
        width: number;
        height: number;
    };
    handleResize: ({ offsetWidth, offsetHeight, }: {
        offsetWidth: number;
        offsetHeight: number;
    }) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
export default Resizer;
//# sourceMappingURL=Resizer.d.ts.map