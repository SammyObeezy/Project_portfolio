/// <reference types="react" />
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
export interface ISwitchLabeledProps extends StandardProps {
    isDisabled: boolean;
    isSelected: boolean;
    onSelect: any;
}
declare const SwitchLabeled: {
    (props: ISwitchLabeledProps): JSX.Element;
    defaultProps: {
        isDisabled: boolean;
        isSelected: boolean;
        onSelect: (...args: any[]) => void;
    };
    displayName: string;
    peek: {
        description: string;
        categories: string[];
        madeFrom: string[];
    };
    propTypes: {
        /**
            Appended to the component-specific class names set on the root element.
        */
        className: PropTypes.Requireable<string>;
        /**
            Passed through to the root element.
        */
        style: PropTypes.Requireable<object>;
        /**
            Child element whose children are used to identify the purpose of this
            switch to the user.
        */
        Label: PropTypes.Requireable<any>;
        isDisabled: PropTypes.Requireable<boolean>;
        isSelected: PropTypes.Requireable<boolean>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        isIncludeExclude: PropTypes.Requireable<boolean>;
    };
    Label: {
        (): null;
        displayName: string;
        peek: {
            description: string;
        };
        propName: string;
        propTypes: {
            /**
                Used to identify the purpose of this switch to the user -- can be any
                renderable content.
            */
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        };
    };
};
export default SwitchLabeled;
//# sourceMappingURL=SwitchLabeled.d.ts.map