import React from 'react';
import PropTypes from 'prop-types';
import { StandardProps } from '../../util/component-types';
import { ICheckboxProps } from '../Checkbox/Checkbox';
/** Label */
export interface ILabelProps extends StandardProps {
}
export interface ICheckboxLabeledProps extends ICheckboxProps {
    /** Child element whose children are used to identify the purpose of this  checkbox to the user. */
    Label?: string | string[] | Element[] | (React.ReactNode & {
        props: ILabelProps;
    });
}
export declare const CheckboxLabeled: {
    (props: ICheckboxLabeledProps): React.ReactElement;
    displayName: string;
    peek: {
        description: string;
        notes: {
            overview: string;
            intendedUse: string;
            technicalRecommendations: string;
        };
        categories: string[];
        madeFrom: string[];
    };
    defaultProps: {
        isIndeterminate: boolean;
        isDisabled: boolean;
        isSelected: boolean;
        onSelect: (...args: any[]) => void;
    };
    propTypes: {
        /**
            Indicates whether the component should appear in an "indeterminate" or
            "partially checked" state. This prop takes precedence over
            \`isSelected\`.
        */
        isIndeterminate: PropTypes.Requireable<boolean>;
        /**
            Indicates whether the component should appear and act disabled by having
            a "greyed out" palette and ignoring user interactions.
        */
        isDisabled: PropTypes.Requireable<boolean>;
        /**
            Indicates that the component is in the "selected" state when true and in
            the "unselected" state when false. This props is ignored if
            \`isIndeterminate\` is \`true\`.
        */
        isSelected: PropTypes.Requireable<boolean>;
        /**
            Called when the user clicks on the component or when they press the space
            key while the component is in focus.  Signature:
            \`(isSelected, { event, props }) => {}\`
        */
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        /**
            Appended to the component-specific class names set on the root element.
        */
        className: PropTypes.Requireable<string>;
        /**
            Passed through to the root element.
        */
        style: PropTypes.Requireable<object>;
        /**
            Child element whose children are used to identify the purpose of this
            checkbox to the user.
        */
        Label: PropTypes.Requireable<any>;
    };
    Label: {
        (props: ILabelProps): null;
        displayName: string;
        peek: {
            description: string;
            categories: string[];
            madeFrom: string[];
        };
        propName: string;
        propTypes: {
            /**
                Used to identify the purpose of this checkbox to the user -- can be
                any renderable content.
            */
            children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        };
    };
};
export default CheckboxLabeled;
//# sourceMappingURL=CheckboxLabeled.d.ts.map