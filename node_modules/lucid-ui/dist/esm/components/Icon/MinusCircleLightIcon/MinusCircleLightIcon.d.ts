/// <reference types="react" />
import PropTypes from 'prop-types';
import { IIconProps } from '../Icon';
export interface IMinusCircleLightIconProps extends IIconProps {
    /** Controls the active state of the Icon. Basically toggles the same "look n
        feel" as when you hover. */
    isActive?: boolean;
}
export declare const minusCircleLighticonPropTypes: {
    /** Controls the active state of the Icon. Basically toggles the same "look n
        feel" as when you hover. */
    isActive: PropTypes.Requireable<boolean>;
    /** Adds styling that makes the icon appear clickable. */
    isClickable: PropTypes.Requireable<boolean>;
    /** Adds styling that makes the icon appear disabled.  Also forces
        isClickable to be false. */
    isDisabled: PropTypes.Requireable<boolean>;
    /** Size variations of the icons. \`size\` directly effects height and width
        but the developer should also be conscious of the relationship with
        \`viewBox\`. */
    size: PropTypes.Requireable<number>;
    /** Size handles width and height, whereas \`width\` can manually override the width that would be set by size. */
    width: PropTypes.Requireable<string | number>;
    /** Size handles width and height, whereas \`height\` can manually override the height that would be set by size. */
    height: PropTypes.Requireable<string | number>;
    /** \`viewBox\` is very important for SVGs. You can think of \`viewBox\` as
        the "artboard" for our SVG while \`size\` is the presented height and
        width. */
    viewBox: PropTypes.Requireable<string>;
    /** Any valid SVG aspect ratio. */
    aspectRatio: PropTypes.Requireable<string>;
    /** Called when the user clicks the \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    /** Called when the user clicks an active, clickable \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onSelect: PropTypes.Requireable<(...args: any[]) => any>;
    /** Any valid React children. */
    children: PropTypes.Requireable<PropTypes.ReactElementLike>;
    /** Classes that are appended to the component defaults. This prop is run
        through the \`classnames\` library. */
    className: PropTypes.Requireable<string>;
};
export declare const MinusCircleLightIcon: {
    ({ className, isActive, isDisabled, isClickable, ...passThroughs }: IMinusCircleLightIconProps): JSX.Element;
    displayName: string;
    propTypes: {
        /** Controls the active state of the Icon. Basically toggles the same "look n
            feel" as when you hover. */
        isActive: PropTypes.Requireable<boolean>;
        /** Adds styling that makes the icon appear clickable. */
        isClickable: PropTypes.Requireable<boolean>;
        /** Adds styling that makes the icon appear disabled.  Also forces
            isClickable to be false. */
        isDisabled: PropTypes.Requireable<boolean>;
        /** Size variations of the icons. \`size\` directly effects height and width
            but the developer should also be conscious of the relationship with
            \`viewBox\`. */
        size: PropTypes.Requireable<number>;
        /** Size handles width and height, whereas \`width\` can manually override the width that would be set by size. */
        width: PropTypes.Requireable<string | number>;
        /** Size handles width and height, whereas \`height\` can manually override the height that would be set by size. */
        height: PropTypes.Requireable<string | number>;
        /** \`viewBox\` is very important for SVGs. You can think of \`viewBox\` as
            the "artboard" for our SVG while \`size\` is the presented height and
            width. */
        viewBox: PropTypes.Requireable<string>;
        /** Any valid SVG aspect ratio. */
        aspectRatio: PropTypes.Requireable<string>;
        /** Called when the user clicks the \`Icon\`. Signature:
            \`({event, props}) => {}\` */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /** Called when the user clicks an active, clickable \`Icon\`. Signature:
            \`({event, props}) => {}\` */
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        /** Any valid React children. */
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        /** Classes that are appended to the component defaults. This prop is run
            through the \`classnames\` library. */
        className: PropTypes.Requireable<string>;
    };
    defaultProps: {
        size: number;
        aspectRatio: string;
        viewBox: string;
        isDisabled: boolean;
        isClickable: boolean;
        color: import("../Icon").Color;
        onClick: (...args: any[]) => void;
        onSelect: (...args: any[]) => void;
    };
};
export default MinusCircleLightIcon;
//# sourceMappingURL=MinusCircleLightIcon.d.ts.map