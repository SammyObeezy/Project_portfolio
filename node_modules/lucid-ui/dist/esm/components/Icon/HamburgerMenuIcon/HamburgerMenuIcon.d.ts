/// <reference types="react" />
import PropTypes from 'prop-types';
import { IIconProps } from '../Icon';
export declare const iconPropTypes: {
    /** Sets the color of the Icon.  May not be applicable for icons that are tied
        to specific colors (e.g. DangerIcon). */
    color: PropTypes.Requireable<string>;
    /** Any valid SVG aspect ratio. */
    aspectRatio: PropTypes.Requireable<string>;
    /** Adds styling that makes the icon appear clickable. */
    isClickable: PropTypes.Requireable<boolean>;
    /** Adds styling that makes the icon appear disabled.  Also forces
        isClickable to be false. */
    isDisabled: PropTypes.Requireable<boolean>;
    /** Called when the user clicks the \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    /** Called when the user clicks an active, clickable \`Icon\`. Signature:
        \`({event, props}) => {}\` */
    onSelect: PropTypes.Requireable<(...args: any[]) => any>;
    /** Any valid React children. */
    children: PropTypes.Requireable<PropTypes.ReactElementLike>;
    /** Classes that are appended to the component defaults. This prop is run
        through the \`classnames\` library. */
    className: PropTypes.Requireable<string>;
};
export declare const HamburgerMenuIcon: {
    ({ className, ...passThroughs }: IIconProps): JSX.Element;
    displayName: string;
    propTypes: {
        /** Sets the color of the Icon.  May not be applicable for icons that are tied
            to specific colors (e.g. DangerIcon). */
        color: PropTypes.Requireable<string>;
        /** Any valid SVG aspect ratio. */
        aspectRatio: PropTypes.Requireable<string>;
        /** Adds styling that makes the icon appear clickable. */
        isClickable: PropTypes.Requireable<boolean>;
        /** Adds styling that makes the icon appear disabled.  Also forces
            isClickable to be false. */
        isDisabled: PropTypes.Requireable<boolean>;
        /** Called when the user clicks the \`Icon\`. Signature:
            \`({event, props}) => {}\` */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /** Called when the user clicks an active, clickable \`Icon\`. Signature:
            \`({event, props}) => {}\` */
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        /** Any valid React children. */
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        /** Classes that are appended to the component defaults. This prop is run
            through the \`classnames\` library. */
        className: PropTypes.Requireable<string>;
    };
    defaultProps: {
        size: number;
        aspectRatio: string;
        viewBox: string;
        isDisabled: boolean;
        isClickable: boolean;
        color: import("../Icon").Color;
        onClick: (...args: any[]) => void;
        onSelect: (...args: any[]) => void;
    };
};
export default HamburgerMenuIcon;
//# sourceMappingURL=HamburgerMenuIcon.d.ts.map