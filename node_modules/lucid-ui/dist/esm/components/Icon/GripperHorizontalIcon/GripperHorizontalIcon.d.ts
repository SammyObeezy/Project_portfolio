/// <reference types="react" />
import PropTypes from 'prop-types';
import { IIconProps } from '../Icon';
export interface IGripperHorizontalIconProps extends IIconProps {
}
export declare const GripperHorizontalIcon: {
    ({ className, isClickable, isDisabled, ...passThroughs }: IGripperHorizontalIconProps): JSX.Element;
    defaultProps: {
        size: number;
        aspectRatio: string;
        viewBox: string;
        isDisabled: boolean;
        isClickable: boolean;
        color: import("../Icon").Color;
        onClick: (...args: any[]) => void;
        onSelect: (...args: any[]) => void;
    };
    displayName: string;
    peek: {
        description: string;
        categories: string[];
        extend: string;
        madeFrom: string[];
    };
    propTypes: {
        /** Classes that are appended to the component defaults. This prop is run
            through the \`classnames\` library. */
        className: PropTypes.Requireable<string>;
        /** Size variations of the icons. \`size\` directly effects height and width
            but the developer should also be conscious of the relationship with
            \`viewBox\`. */
        size: PropTypes.Requireable<number>;
        /** Size handles width and height, whereas \`width\` can manually override the width that would be set by size. */
        width: PropTypes.Requireable<string | number>;
        /** Size handles width and height, whereas \`height\` can manually override the height that would be set by size. */
        height: PropTypes.Requireable<string | number>;
        /** \`viewBox\` is very important for SVGs. You can think of \`viewBox\` as
            the "artboard" for our SVG while \`size\` is the presented height and
            width. */
        viewBox: PropTypes.Requireable<string>;
        /** Any valid SVG aspect ratio. */
        aspectRatio: PropTypes.Requireable<string>;
        /** Adds styling that makes the icon appear clickable. */
        isClickable: PropTypes.Requireable<boolean>;
        /** Adds styling that makes the icon appear disabled.  Also forces
            isClickable to be false. */
        isDisabled: PropTypes.Requireable<boolean>;
        /** Called when the user clicks the \`Icon\`. Signature:
            \`({event, props}) => {}\` */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /** Called when the user clicks an active, clickable \`Icon\`. Signature:
            \`({event, props}) => {}\` */
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        /** Any valid React children. */
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        /** Sets the color of the Icon.  May not be applicable for icons that are tied
            to specific colors (e.g. DangerIcon). */
        color: PropTypes.Requireable<string>;
    };
};
export default GripperHorizontalIcon;
//# sourceMappingURL=GripperHorizontalIcon.d.ts.map